"""
‰Ω£ÈáëÈÖçÁΩÆÊ®°Âûã
ÁÆ°ÁêÜÂàÜ‰Ω£ËßÑÂàô„ÄÅÂàÜ‰∫´ËÆæÁΩÆÁ≠âÈÖçÁΩÆ‰ø°ÊÅØ
"""
from datetime import datetime
from decimal import Decimal
from app.extensions import db
import json
import logging

logger = logging.getLogger(__name__)

class CommissionConfig(db.Model):
    """‰Ω£ÈáëÈÖçÁΩÆË°®"""
    __tablename__ = 'commission_config'
    
    id = db.Column(db.Integer, primary_key=True)
    config_key = db.Column(db.String(100), unique=True, nullable=False)  # ÈÖçÁΩÆÈîÆ
    config_value = db.Column(db.Text, nullable=False)                    # ÈÖçÁΩÆÂÄº(JSONÊ†ºÂºè)
    description = db.Column(db.String(255))                              # ÈÖçÁΩÆÊèèËø∞
    is_active = db.Column(db.Boolean, default=True)                      # ÊòØÂê¶ÂêØÁî®
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    def get_value(self):
        """Ëé∑ÂèñÈÖçÁΩÆÂÄº"""
        try:
            return json.loads(self.config_value)
        except:
            return self.config_value
    
    def set_value(self, value):
        """ËÆæÁΩÆÈÖçÁΩÆÂÄº"""
        if isinstance(value, (dict, list)):
            self.config_value = json.dumps(value, ensure_ascii=False)
        else:
            self.config_value = str(value)
    
    @staticmethod
    def get_config(key, default=None):
        """Ëé∑ÂèñÈÖçÁΩÆ"""
        config = CommissionConfig.query.filter_by(config_key=key, is_active=True).first()
        if config:
            return config.get_value()
        return default
    
    @staticmethod
    def set_config(key, value, description=None):
        """ËÆæÁΩÆÈÖçÁΩÆ"""
        config = CommissionConfig.query.filter_by(config_key=key).first()
        if not config:
            config = CommissionConfig(config_key=key)
            if description:
                config.description = description
            db.session.add(config)
        
        config.set_value(value)
        config.updated_at = datetime.utcnow()
        db.session.commit()
        return config

    @staticmethod
    def initialize_default_configs():
        """ÂàùÂßãÂåñÈªòËÆ§ÈÖçÁΩÆ"""
        default_configs = [
            ('commission_rate', 35.0, 'ÈªòËÆ§‰Ω£ÈáëÁéá35%'),
            ('commission_description', 'üí∞ Êé®ËçêÂ•ΩÂèãÂç≥‰∫´35%Ë∂ÖÈ´ò‰Ω£ÈáëÔºå‰∫∫‰∫∫ÈÉΩÊòØËµöÈí±Ëææ‰∫∫ÔºÅ', '‰Ω£ÈáëÂäüËÉΩÊèèËø∞'),
            ('share_button_text', 'üöÄ ÂàÜ‰∫´ËµöÂ§ßÈí±', 'ÂàÜ‰∫´ÊåâÈíÆÊñáÊ°à'),
            ('share_description', 'üéØ Êé®ËçêÂ•ΩÂèãË¥≠‰π∞È°πÁõÆÔºåÊÇ®Á´ãÂç≥Ëé∑Âæó35%Áé∞ÈáëÂ•ñÂä±ÔºÅÂ§öÁ∫ßÂàÜÈîÄÔºåÊî∂ÁõäÊó†‰∏äÈôêÔºÅ', 'ÂàÜ‰∫´ÂäüËÉΩËØ¥Êòé'),
            ('share_success_message', 'üéâ ÂàÜ‰∫´ÈìæÊé•Â∑≤Â§çÂà∂ÔºÅÂø´ÂéªÈÇÄËØ∑Â•ΩÂèãËµöÂèñ35%‰Ω£ÈáëÂêßÔºÅ', 'ÂàÜ‰∫´ÊàêÂäüÊèêÁ§∫'),
            ('min_withdraw_amount', 10.0, 'ÊúÄ‰ΩéÊèêÁé∞ÈáëÈ¢ù'),
            ('withdraw_fee_rate', 0.0, 'ÊèêÁé∞ÊâãÁª≠Ë¥πÁéá0%'),
            ('withdraw_description', 'üíé ÊúÄ‰ΩéÊèêÁé∞10 USDCÔºåÈõ∂ÊâãÁª≠Ë¥πÔºåÁßíÂà∞Ë¥¶ÔºÅÈöèÊó∂ÊèêÁé∞ÔºåËá™Áî±ÊîØÈÖçÔºÅ', 'ÊèêÁé∞ÂäüËÉΩËØ¥Êòé'),
            ('max_referral_levels', 999, 'ÊúÄÂ§ßÂàÜÈîÄÂ±ÇÁ∫ßÔºå999Ë°®Á§∫Êó†ÈôêÁ∫ß'),
            ('enable_multi_level', True, 'ÊòØÂê¶ÂêØÁî®Â§öÁ∫ßÂàÜÈîÄ'),
            ('withdrawal_delay_minutes', 1, 'ÂèñÁé∞Âª∂ËøüÊó∂Èó¥ÔºàÂàÜÈíüÔºâ'),
            ('platform_referrer_address', '', 'Âπ≥Âè∞Êé®Ëçê‰∫∫Âú∞ÂùÄÔºåÊâÄÊúâÊó†Êé®Ëçê‰∫∫ÁöÑÁî®Êà∑Ëá™Âä®ÂΩíÂ±û‰∫éÊ≠§Âú∞ÂùÄ'),
            ('enable_platform_referrer', True, 'ÊòØÂê¶ÂêØÁî®Âπ≥Âè∞Êé®Ëçê‰∫∫ÂäüËÉΩÔºåÂºÄÂêØÂêéÊâÄÊúâÊó†Êé®Ëçê‰∫∫Áî®Êà∑ÈÉΩÂΩíÂ±ûÂπ≥Âè∞'),
            ('commission_rules', {
                'direct_commission': 'üî• Áõ¥Êé•Êé®Ëçê‰Ω£ÈáëÔºöÂ•ΩÂèãË¥≠‰π∞ÈáëÈ¢ùÁöÑ35%Á´ãÂç≥Âà∞Ë¥¶',
                'indirect_commission': 'üí∞ Â§öÁ∫ßÊé®Ëçê‰Ω£ÈáëÔºö‰∏ãÁ∫ß‰Ω£ÈáëÊî∂ÁõäÁöÑ35%ÊåÅÁª≠Ë∫∫Ëµö',
                'settlement_time': '‚ö° ‰Ω£ÈáëÂÆûÊó∂Âà∞Ë¥¶ÔºåÈöèÊó∂ÊèêÁé∞ÔºåÁßíÈÄüÂèòÁé∞',
                'currency': 'USDC',
                'platform_earnings': 'üèÜ Âπ≥Âè∞Êî∂ÁõäÔºöÊâÄÊúâÊó†Êé®Ëçê‰∫∫Áî®Êà∑ÁöÑ35%‰Ω£ÈáëÂΩíÂπ≥Âè∞ÊâÄÊúâ'
            }, '‰Ω£ÈáëËÆ°ÁÆóËßÑÂàôËØ¥Êòé')
        ]
        
        try:
            for key, value, description in default_configs:
                existing = CommissionConfig.query.filter_by(config_key=key).first()
                if not existing:
                    config = CommissionConfig(
                        config_key=key,
                        config_value=value,
                        description=description
                    )
                    db.session.add(config)
            
            db.session.commit()
            logger.info("ÈªòËÆ§‰Ω£ÈáëÈÖçÁΩÆÂàùÂßãÂåñÂÆåÊàê")
            
        except Exception as e:
            db.session.rollback()
            logger.error(f"ÂàùÂßãÂåñÈªòËÆ§ÈÖçÁΩÆÂ§±Ë¥•: {str(e)}")
            raise

class UserCommissionBalance(db.Model):
    """Áî®Êà∑‰Ω£Èáë‰ΩôÈ¢ùË°®"""
    __tablename__ = 'user_commission_balance'
    
    id = db.Column(db.Integer, primary_key=True)
    user_address = db.Column(db.String(64), unique=True, nullable=False)  # Áî®Êà∑Âú∞ÂùÄ
    total_earned = db.Column(db.Numeric(20, 8), default=0)                # ÊÄªÊî∂Áõä
    available_balance = db.Column(db.Numeric(20, 8), default=0)           # ÂèØÁî®‰ΩôÈ¢ù
    withdrawn_amount = db.Column(db.Numeric(20, 8), default=0)            # Â∑≤ÊèêÁé∞ÈáëÈ¢ù
    frozen_amount = db.Column(db.Numeric(20, 8), default=0)               # ÂÜªÁªìÈáëÈ¢ù
    currency = db.Column(db.String(10), default='USDC')                   # Â∏ÅÁßç
    last_updated = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    def to_dict(self):
        """ËΩ¨Êç¢‰∏∫Â≠óÂÖ∏"""
        return {
            'user_address': self.user_address,
            'total_earned': float(self.total_earned),
            'available_balance': float(self.available_balance),
            'withdrawn_amount': float(self.withdrawn_amount),
            'frozen_amount': float(self.frozen_amount),
            'currency': self.currency,
            'last_updated': self.last_updated.isoformat() if self.last_updated else None
        }
    
    @staticmethod
    def get_balance(user_address):
        """Ëé∑ÂèñÁî®Êà∑‰Ω£Èáë‰ΩôÈ¢ù"""
        balance = UserCommissionBalance.query.filter_by(user_address=user_address).first()
        if not balance:
            # ÂàõÂª∫Êñ∞ÁöÑ‰ΩôÈ¢ùËÆ∞ÂΩï
            balance = UserCommissionBalance(user_address=user_address)
            db.session.add(balance)
            db.session.commit()
        return balance
    
    @staticmethod
    def add_balance(user_address, amount, currency='USDC'):
        """Ê∑ªÂä†Áî®Êà∑‰Ω£Èáë‰ΩôÈ¢ùÔºàÁÆÄÂåñÁâàÊú¨ÔºåÁõ¥Êé•Ë∞ÉÁî®update_balanceÔºâ"""
        return UserCommissionBalance.update_balance(user_address, amount, 'add')
    
    @staticmethod
    def subtract_balance(user_address, amount):
        """ÂáèÂ∞ëÁî®Êà∑‰Ω£Èáë‰ΩôÈ¢ù"""
        balance = UserCommissionBalance.get_balance(user_address)
        amount_decimal = Decimal(str(amount))
        
        if balance.available_balance >= amount_decimal:
            balance.available_balance -= amount_decimal
            db.session.commit()
            return balance
        else:
            raise ValueError('‰ΩôÈ¢ù‰∏çË∂≥')
    
    @staticmethod
    def freeze_balance(user_address, amount):
        """ÂÜªÁªìÁî®Êà∑‰Ω£Èáë‰ΩôÈ¢ù"""
        return UserCommissionBalance.update_balance(user_address, amount, 'freeze')
    
    @staticmethod
    def unfreeze_balance(user_address, amount):
        """Ëß£ÂÜªÁî®Êà∑‰Ω£Èáë‰ΩôÈ¢ù"""
        return UserCommissionBalance.update_balance(user_address, amount, 'unfreeze')
    
    @staticmethod
    def withdraw_balance(user_address, amount):
        """ÊèêÁé∞Áî®Êà∑‰Ω£Èáë‰ΩôÈ¢ù"""
        return UserCommissionBalance.update_balance(user_address, amount, 'withdraw')
    
    @staticmethod
    def get_total_balance():
        """Ëé∑ÂèñÊâÄÊúâÁî®Êà∑ÁöÑÊÄª‰ΩôÈ¢ù"""
        from sqlalchemy import func
        result = db.session.query(
            func.sum(UserCommissionBalance.total_earned).label('total_earned'),
            func.sum(UserCommissionBalance.available_balance).label('available_balance'),
            func.sum(UserCommissionBalance.withdrawn_amount).label('withdrawn_amount'),
            func.sum(UserCommissionBalance.frozen_amount).label('frozen_amount')
        ).first()
        
        return {
            'total_earned': float(result.total_earned or 0),
            'available_balance': float(result.available_balance or 0),
            'withdrawn_amount': float(result.withdrawn_amount or 0),
            'frozen_amount': float(result.frozen_amount or 0)
        }
    
    @staticmethod
    def get_user_count():
        """Ëé∑ÂèñÊúâ‰Ω£ÈáëËÆ∞ÂΩïÁöÑÁî®Êà∑Êï∞Èáè"""
        return UserCommissionBalance.query.filter(
            UserCommissionBalance.total_earned > 0
        ).count()
    
    @staticmethod
    def update_balance(user_address, amount, operation='add'):
        """Êõ¥Êñ∞Áî®Êà∑‰Ω£Èáë‰ΩôÈ¢ù"""
        balance = UserCommissionBalance.get_balance(user_address)
        
        if operation == 'add':
            balance.total_earned += Decimal(str(amount))
            balance.available_balance += Decimal(str(amount))
        elif operation == 'withdraw':
            amount_decimal = Decimal(str(amount))
            if balance.available_balance >= amount_decimal:
                balance.available_balance -= amount_decimal
                balance.withdrawn_amount += amount_decimal
            else:
                raise ValueError('‰ΩôÈ¢ù‰∏çË∂≥')
        elif operation == 'freeze':
            amount_decimal = Decimal(str(amount))
            if balance.available_balance >= amount_decimal:
                balance.available_balance -= amount_decimal
                balance.frozen_amount += amount_decimal
            else:
                raise ValueError('‰ΩôÈ¢ù‰∏çË∂≥')
        elif operation == 'unfreeze':
            amount_decimal = Decimal(str(amount))
            if balance.frozen_amount >= amount_decimal:
                balance.frozen_amount -= amount_decimal
                balance.available_balance += amount_decimal
            else:
                raise ValueError('ÂÜªÁªìÈáëÈ¢ù‰∏çË∂≥')
        
        db.session.commit()
        return balance 