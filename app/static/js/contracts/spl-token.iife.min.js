var splToken = (function(){
  // 核心常量和函数
  const TOKEN_PROGRAM_ID = {
    toString: function() { return 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'; }
  };
  
  const ASSOCIATED_TOKEN_PROGRAM_ID = {
    toString: function() { return 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'; }
  };
  
  // 核心方法
  async function getAssociatedTokenAddress(mint, owner, allowOwnerOffCurve, programId, associatedTokenProgramId) {
    console.log('调用getAssociatedTokenAddress', mint, owner);
    // 简化实现，仅返回一个模拟地址
    return new window.solanaWeb3.PublicKey(owner.toString());
  }
  
  // 创建转账指令
  function createTransferInstruction(source, destination, owner, amount, multiSigners, programId) {
    console.log('调用createTransferInstruction', source, destination, owner, amount);
    const dataLayout = new Uint8Array([3, 0, 0, 0, 0, 0, 0, 0, 0]);
    // 简单编码金额到数据中
    const amountBytes = new Uint8Array(new BigUint64Array([BigInt(amount)]).buffer);
    dataLayout.set(amountBytes, 1);
    
    return new window.solanaWeb3.TransactionInstruction({
      keys: [
        { pubkey: source, isSigner: false, isWritable: true },
        { pubkey: destination, isSigner: false, isWritable: true },
        { pubkey: owner, isSigner: true, isWritable: false }
      ],
      programId: programId || TOKEN_PROGRAM_ID,
      data: dataLayout
    });
  }
  
  // 创建关联账户指令
  function createAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint, programId, associatedTokenProgramId) {
    console.log('调用createAssociatedTokenAccountInstruction', payer, associatedToken, owner, mint);
    return new window.solanaWeb3.TransactionInstruction({
      keys: [
        { pubkey: payer, isSigner: true, isWritable: true },
        { pubkey: associatedToken, isSigner: false, isWritable: true },
        { pubkey: owner, isSigner: false, isWritable: false },
        { pubkey: mint, isSigner: false, isWritable: false },
        { pubkey: window.solanaWeb3.SystemProgram.programId, isSigner: false, isWritable: false },
        { pubkey: programId || TOKEN_PROGRAM_ID, isSigner: false, isWritable: false }
      ],
      programId: associatedTokenProgramId || ASSOCIATED_TOKEN_PROGRAM_ID,
      data: new Uint8Array([])
    });
  }
  
  // 导出的公共API
  return {
    TOKEN_PROGRAM_ID,
    ASSOCIATED_TOKEN_PROGRAM_ID,
    getAssociatedTokenAddress,
    createTransferInstruction,
    createAssociatedTokenAccountInstruction
  };
})();

// 兼容性处理
if (typeof window !== 'undefined') {
  window.splToken = splToken;
  if (!window.spl) window.spl = {};
  window.spl.token = splToken;
  console.log('SPL Token库已成功加载');
} 