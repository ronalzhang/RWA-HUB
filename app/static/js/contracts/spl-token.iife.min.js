var spl = (function() {
    "use strict";
    
    // 关键常量定义
    const TOKEN_PROGRAM_ID = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA";
    const ASSOCIATED_TOKEN_PROGRAM_ID = "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL";
    
    // 为浏览器环境创建Buffer兼容层
    const BufferCompat = {
        from: function(data) {
            if (typeof data === 'string') {
                const encoder = new TextEncoder();
                return encoder.encode(data);
            }
            if (Array.isArray(data)) {
                return new Uint8Array(data);
            }
            if (data instanceof Uint8Array) {
                return data;
            }
            return new Uint8Array(0);
        }
    };
    
    // 提前检查solanaWeb3可用性
    function getSolanaWeb3() {
        if (typeof window === 'undefined' || typeof window.solanaWeb3 === 'undefined') {
            throw new Error('solanaWeb3 is not defined or not available');
        }
        return window.solanaWeb3;
    }
    
    // 获取PublicKey实例
    function getPublicKey(address) {
        const solanaWeb3 = getSolanaWeb3();
        return new solanaWeb3.PublicKey(address);
    }
    
    // 主要功能函数
    
    // 创建转账指令
    function createTransferInstruction(source, destination, owner, amount, multiSigners = [], programId) {
        const solanaWeb3 = getSolanaWeb3();
        
        // 确保我们有有效的程序ID
        if (!programId) {
            // 使用token.TOKEN_PROGRAM_ID而非直接从字符串创建，确保使用已初始化的对象
            programId = token.TOKEN_PROGRAM_ID;
        }
        
        const keys = [
            { pubkey: source, isSigner: false, isWritable: true },
            { pubkey: destination, isSigner: false, isWritable: true },
            { pubkey: owner, isSigner: multiSigners.length === 0, isWritable: false }
        ];
        
        multiSigners.forEach(signer => {
            keys.push({
                pubkey: signer.publicKey,
                isSigner: true,
                isWritable: false
            });
        });
        
        // 3 是Transfer指令的命令ID
        const data = new Uint8Array(9);
        data[0] = 3;
        // 8字节的amount数据
        const amountBytes = new DataView(new ArrayBuffer(8));
        amountBytes.setBigUint64(0, BigInt(amount), true);
        data.set(new Uint8Array(amountBytes.buffer), 1);
        
        return new solanaWeb3.TransactionInstruction({
            keys,
            programId,
            data: BufferCompat.from(data)
        });
    }
    
    // 创建关联代币账户指令
    async function createAssociatedTokenAccountInstruction(
        payer,
        associatedToken,
        owner,
        mint,
        programId,
        associatedTokenProgramId
    ) {
        const solanaWeb3 = getSolanaWeb3();
        
        // 确保我们有有效的程序ID
        if (!programId) {
            programId = token.TOKEN_PROGRAM_ID;
        }
        
        if (!associatedTokenProgramId) {
            associatedTokenProgramId = token.ASSOCIATED_TOKEN_PROGRAM_ID;
        }
        
        return new solanaWeb3.TransactionInstruction({
            keys: [
                { pubkey: payer, isSigner: true, isWritable: true },
                { pubkey: associatedToken, isSigner: false, isWritable: true },
                { pubkey: owner, isSigner: false, isWritable: false },
                { pubkey: mint, isSigner: false, isWritable: false },
                { pubkey: solanaWeb3.SystemProgram.programId, isSigner: false, isWritable: false },
                { pubkey: token.TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },
                { pubkey: solanaWeb3.SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },
                { pubkey: token.ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false }
            ],
            programId: associatedTokenProgramId,
            data: BufferCompat.from([])
        });
    }
    
    // 获取关联代币账户地址
    async function getAssociatedTokenAddress(
        mint,
        owner,
        allowOwnerOffCurve = false,
        programId,
        associatedTokenProgramId
    ) {
        const solanaWeb3 = getSolanaWeb3();
        
        // 确保我们有有效的程序ID
        if (!programId) {
            programId = token.TOKEN_PROGRAM_ID;
        }
        
        if (!associatedTokenProgramId) {
            associatedTokenProgramId = token.ASSOCIATED_TOKEN_PROGRAM_ID;
        }
        
        // 确保mint和owner是PublicKey类型
        if (!(mint instanceof solanaWeb3.PublicKey)) {
            mint = new solanaWeb3.PublicKey(mint);
        }
        
        if (!(owner instanceof solanaWeb3.PublicKey)) {
            owner = new solanaWeb3.PublicKey(owner);
        }
        
        // 查找程序地址
        const [address] = await solanaWeb3.PublicKey.findProgramAddress(
            [
                owner.toBuffer(),
                programId.toBuffer(),
                mint.toBuffer()
            ],
            associatedTokenProgramId
        );
        
        return address;
    }
    
    // 创建Token导出对象
    var token = {};
    
    // 先添加导出函数，此时还不初始化程序ID
    token.createTransferInstruction = createTransferInstruction;
    token.createAssociatedTokenAccountInstruction = createAssociatedTokenAccountInstruction;
    token.getAssociatedTokenAddress = getAssociatedTokenAddress;
    
    // 添加Buffer兼容层
    token.Buffer = BufferCompat;
    
    // 延迟初始化程序ID的函数
    token.initializeProgramIds = function() {
        if (typeof window !== 'undefined' && window.solanaWeb3) {
            const solanaWeb3 = window.solanaWeb3;
            // 只有在尚未初始化时才重新创建
            if (!token.TOKEN_PROGRAM_ID || !(token.TOKEN_PROGRAM_ID instanceof solanaWeb3.PublicKey)) {
                token.TOKEN_PROGRAM_ID = new solanaWeb3.PublicKey(TOKEN_PROGRAM_ID);
            }
            if (!token.ASSOCIATED_TOKEN_PROGRAM_ID || !(token.ASSOCIATED_TOKEN_PROGRAM_ID instanceof solanaWeb3.PublicKey)) {
                token.ASSOCIATED_TOKEN_PROGRAM_ID = new solanaWeb3.PublicKey(ASSOCIATED_TOKEN_PROGRAM_ID);
            }
            return true;
        }
        return false;
    };
    
    // 尝试立即初始化，但不要依赖它成功
    try {
        if (typeof window !== 'undefined' && window.solanaWeb3) {
            token.TOKEN_PROGRAM_ID = new window.solanaWeb3.PublicKey(TOKEN_PROGRAM_ID);
            token.ASSOCIATED_TOKEN_PROGRAM_ID = new window.solanaWeb3.PublicKey(ASSOCIATED_TOKEN_PROGRAM_ID);
        } else {
            // 临时使用字符串，稍后会被正确初始化
            token.TOKEN_PROGRAM_ID = TOKEN_PROGRAM_ID;
            token.ASSOCIATED_TOKEN_PROGRAM_ID = ASSOCIATED_TOKEN_PROGRAM_ID;
        }
    } catch (e) {
        console.warn("延迟初始化程序ID: ", e.message);
        // 临时使用字符串，稍后会被正确初始化
        token.TOKEN_PROGRAM_ID = TOKEN_PROGRAM_ID;
        token.ASSOCIATED_TOKEN_PROGRAM_ID = ASSOCIATED_TOKEN_PROGRAM_ID;
    }
    
    return { token: token };
})();

// 确保兼容性
if (typeof window !== 'undefined') {
    if (!window.spl) window.spl = {};
    window.spl.token = spl.token;
    window.splToken = spl.token;
    
    // 全局添加Buffer兼容层，以防其他代码直接引用
    if (typeof Buffer === 'undefined') {
        window.Buffer = {
            from: function(data) {
                if (typeof data === 'string') {
                    const encoder = new TextEncoder();
                    return encoder.encode(data);
                }
                if (Array.isArray(data)) {
                    return new Uint8Array(data);
                }
                if (data instanceof Uint8Array) {
                    return data;
                }
                return new Uint8Array(0);
            }
        };
    }
    
    // 在页面加载完成后再次尝试初始化程序ID
    if (document.readyState === 'complete' || document.readyState === 'interactive') {
        setTimeout(function() {
            if (window.splToken.initializeProgramIds()) {
                console.log('SPL Token库程序ID已成功初始化');
            }
        }, 100);
    } else {
        window.addEventListener('DOMContentLoaded', function() {
            setTimeout(function() {
                if (window.splToken.initializeProgramIds()) {
                    console.log('SPL Token库程序ID已成功初始化(DOMContentLoaded)');
                }
            }, 100);
        });
    }
    
    console.log('SPL Token库已成功加载，版本: 定制加固版 (带Buffer兼容层和程序ID延迟初始化)');
} 