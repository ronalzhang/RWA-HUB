var spl = (function() {
    "use strict";
    
    // 关键常量定义
    const TOKEN_PROGRAM_ID = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA";
    const ASSOCIATED_TOKEN_PROGRAM_ID = "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL";
    
    // 为浏览器环境创建Buffer兼容层
    const BufferCompat = {
        from: function(data) {
            if (typeof data === 'string') {
                const encoder = new TextEncoder();
                return encoder.encode(data);
            }
            if (Array.isArray(data)) {
                return new Uint8Array(data);
            }
            if (data instanceof Uint8Array) {
                return data;
            }
            return new Uint8Array(0);
        }
    };
    
    // 主要功能函数
    
    // 创建转账指令
    function createTransferInstruction(source, destination, owner, amount, multiSigners = [], programId) {
        if (typeof window.solanaWeb3 === 'undefined') {
            throw new Error('solanaWeb3 is not defined');
        }
        
        const solanaWeb3 = window.solanaWeb3;
        
        if (!programId) {
            programId = new solanaWeb3.PublicKey(TOKEN_PROGRAM_ID);
        }
        
        const keys = [
            { pubkey: source, isSigner: false, isWritable: true },
            { pubkey: destination, isSigner: false, isWritable: true },
            { pubkey: owner, isSigner: multiSigners.length === 0, isWritable: false }
        ];
        
        multiSigners.forEach(signer => {
            keys.push({
                pubkey: signer.publicKey,
                isSigner: true,
                isWritable: false
            });
        });
        
        // 3 是Transfer指令的命令ID
        const data = new Uint8Array(9);
        data[0] = 3;
        // 8字节的amount数据
        const amountBytes = new DataView(new ArrayBuffer(8));
        amountBytes.setBigUint64(0, BigInt(amount), true);
        data.set(new Uint8Array(amountBytes.buffer), 1);
        
        return new solanaWeb3.TransactionInstruction({
            keys,
            programId,
            data: BufferCompat.from(data)
        });
    }
    
    // 创建关联代币账户指令
    async function createAssociatedTokenAccountInstruction(
        payer,
        associatedToken,
        owner,
        mint,
        programId,
        associatedTokenProgramId
    ) {
        if (typeof window.solanaWeb3 === 'undefined') {
            throw new Error('solanaWeb3 is not defined');
        }
        
        const solanaWeb3 = window.solanaWeb3;
        
        if (!programId) {
            programId = new solanaWeb3.PublicKey(TOKEN_PROGRAM_ID);
        }
        
        if (!associatedTokenProgramId) {
            associatedTokenProgramId = new solanaWeb3.PublicKey(ASSOCIATED_TOKEN_PROGRAM_ID);
        }
        
        return new solanaWeb3.TransactionInstruction({
            keys: [
                { pubkey: payer, isSigner: true, isWritable: true },
                { pubkey: associatedToken, isSigner: false, isWritable: true },
                { pubkey: owner, isSigner: false, isWritable: false },
                { pubkey: mint, isSigner: false, isWritable: false },
                { pubkey: solanaWeb3.SystemProgram.programId, isSigner: false, isWritable: false },
                { pubkey: new solanaWeb3.PublicKey(TOKEN_PROGRAM_ID), isSigner: false, isWritable: false },
                { pubkey: solanaWeb3.SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },
                { pubkey: new solanaWeb3.PublicKey(ASSOCIATED_TOKEN_PROGRAM_ID), isSigner: false, isWritable: false }
            ],
            programId: associatedTokenProgramId,
            data: BufferCompat.from([])
        });
    }
    
    // 获取关联代币账户地址
    async function getAssociatedTokenAddress(
        mint,
        owner,
        allowOwnerOffCurve = false,
        programId,
        associatedTokenProgramId
    ) {
        if (typeof window.solanaWeb3 === 'undefined') {
            throw new Error('solanaWeb3 is not defined');
        }
        
        const solanaWeb3 = window.solanaWeb3;
        
        if (!programId) {
            programId = new solanaWeb3.PublicKey(TOKEN_PROGRAM_ID);
        }
        
        if (!associatedTokenProgramId) {
            associatedTokenProgramId = new solanaWeb3.PublicKey(ASSOCIATED_TOKEN_PROGRAM_ID);
        }
        
        // 确保mint和owner是PublicKey类型
        if (!(mint instanceof solanaWeb3.PublicKey)) {
            mint = new solanaWeb3.PublicKey(mint);
        }
        
        if (!(owner instanceof solanaWeb3.PublicKey)) {
            owner = new solanaWeb3.PublicKey(owner);
        }
        
        // 查找程序地址
        const [address] = await solanaWeb3.PublicKey.findProgramAddress(
            [
                owner.toBuffer(),
                programId.toBuffer(),
                mint.toBuffer()
            ],
            associatedTokenProgramId
        );
        
        return address;
    }
    
    // 导出对象
    var token = {};
    
    // 添加导出常量
    token.TOKEN_PROGRAM_ID = new (window.solanaWeb3 ? window.solanaWeb3.PublicKey : Object)(TOKEN_PROGRAM_ID);
    token.ASSOCIATED_TOKEN_PROGRAM_ID = new (window.solanaWeb3 ? window.solanaWeb3.PublicKey : Object)(ASSOCIATED_TOKEN_PROGRAM_ID);
    
    // 添加导出函数
    token.createTransferInstruction = createTransferInstruction;
    token.createAssociatedTokenAccountInstruction = createAssociatedTokenAccountInstruction;
    token.getAssociatedTokenAddress = getAssociatedTokenAddress;
    
    // 添加Buffer兼容层
    token.Buffer = BufferCompat;
    
    return { token: token };
})();

// 确保兼容性
if (typeof window !== 'undefined') {
    if (!window.spl) window.spl = {};
    window.spl.token = spl.token;
    window.splToken = spl.token;
    // 全局添加Buffer兼容层，以防其他代码直接引用
    if (typeof Buffer === 'undefined') {
        window.Buffer = {
            from: function(data) {
                if (typeof data === 'string') {
                    const encoder = new TextEncoder();
                    return encoder.encode(data);
                }
                if (Array.isArray(data)) {
                    return new Uint8Array(data);
                }
                if (data instanceof Uint8Array) {
                    return data;
                }
                return new Uint8Array(0);
            }
        };
    }
    console.log('SPL Token库已成功加载，版本: 定制加固版 (带Buffer兼容层)');
} 